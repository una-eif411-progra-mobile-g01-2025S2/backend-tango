# Application config
spring.application.name=PAI Backend

# PostgreSQL - Render (solo usa variables de entorno)
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Flyway
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration


# Server
server.port=8080
server.servlet.context-path=/

# CORS (ajusta los orígenes si usas frontends externos)
spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:8080
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# OpenRouter IA (ajusta si usas IA en producción)
openrouter.api.key=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
openrouter.api.url=https://openrouter.ai/api/v1/chat/completions
openrouter.model=tngtech/deepseek-r1t2-chimera:free

# Exponer solo el endpoint health (y opcionalmente info)
management.endpoints.web.exposure.include=health,info

# (Opcional) Permitir acceso sin autenticación
management.endpoint.health.enabled=true
management.endpoints.web.base-path=/actuator