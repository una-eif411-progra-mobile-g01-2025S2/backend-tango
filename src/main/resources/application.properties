# Configuraciï¿½n de la aplicaciï¿½n
spring.application.name=PAI Backend

# Configuraciï¿½n de base de datos PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/paiapp
spring.datasource.username=paiapp
spring.datasource.password=12345
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuraciï¿½n de JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Configuraciï¿½n de pruebas
spring.test.database.replace=NONE

# Configuraciï¿½n de WebServices
vs=v1
url.base=/api/${vs}
url.login=${url.base}/users/login
url.signup=${url.base}/users/signup
url.users=${url.base}/users
url.subjects=${url.base}/subjects
url.tasks=${url.base}/tasks
url.priorities=${url.base}/priorities
url.calendar=${url.base}/calendar
url.study-blocks=${url.base}/study-blocks
url.periods=${url.base}/periods
url.roles=${url.base}/roles
url.auth=${url.base}/auth
url.ping=${url.base}/ping
url.unsecure=${url.base}/unsecure
url.ai-advisor=${url.base}/ai-advisor

# Endpoints especï¿½ficos (manteniendo compatibilidad con Controllers actuales)
api.version=${vs}
api.base-path=${url.base}
api.endpoints.users=${url.users}
api.endpoints.subjects=${url.subjects}
api.endpoints.tasks=${url.tasks}
api.endpoints.calendar=${url.calendar}
api.endpoints.study-blocks=${url.study-blocks}
api.endpoints.periods=${url.periods}
api.endpoints.roles=${url.roles}
api.endpoints.auth=${url.auth}
api.endpoints.ping=${url.ping}
api.endpoints.ai-advisor=${url.ai-advisor}

# Configuraciï¿½n del servidor
server.port=8080
server.servlet.context-path=/

# Configuraciï¿½n de CORS (para desarrollo)
spring.web.cors.allowed-origins=http://localhost:3000,http://localhost:8080
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# Configuraciï¿½n de OpenRouter para IA (DeepSeek R1 Free)
openrouter.api.key=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
openrouter.api.url=https://openrouter.ai/api/v1/chat/completions
openrouter.model=tngtech/deepseek-r1t2-chimera:free

# === PostgreSQL (Render) ===
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

# === JPA / Hibernate ===
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

# === Flyway ===
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

# === Servidor ===
server.port=8080


# =====================
# Perfil de producción (Render)
# Estas propiedades sólo aplican cuando SPRING_PROFILES_ACTIVE=prod
spring.config.activate.on-profile=prod

# Datasource por variables de entorno de Render
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

# JPA/Hibernate para prod
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true

# Flyway
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

# Clave de OpenRouter por variable de entorno (mantiene el original intacto arriba)
openrouter.api.key=${OPENROUTER_API_KEY}

# Puerto
server.port=8080
